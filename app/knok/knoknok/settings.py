"""
Django settings for knoknok project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from corsheaders.defaults import default_headers
from typing import List, Tuple
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i!j3$*6%h4--5x31nnx0vehq4+q0u_dvaatvzubst2o($)@7y@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_ROOT = os.getenv('URL_MEDIA')
MEDIA_URL = '/media/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'djoser',
    'socnet.apps.SocnetConfig',
    'corsheaders',
    'django_cassandra_engine',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware'
]

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    'UPLOADED_FILES_USE_URL': False,
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'knoknok.smtp@gmail.com'
EMAIL_HOST_PASSWORD = 'Knoksmtp123'
EMAIL_PORT = 587
DOMAIN = os.getenv('DOMAIN')
SITE_NAME = os.getenv('SITE_NAME')

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=360),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

#Changed settings for send csrf

CSRF_COOKIE_SECURE=False
CSRF_TRUSTED_ORIGINS = ['https://knok.r2n.ru']
CSRF_COOKIE_DOMAIN='knok.r2n.ru'
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_REPLACE_HTTPS_REFERER = True




CORS_ORIGIN_ALLOW_ALL = False

CORS_ORIGIN_WHITELIST  = [
        os.getenv('CORS_ORIGIN_WHITELIST_PARAM'),
    ]

CORS_ALLOW_HEADERS = default_headers + (
    'Access-Control-Allow-Origin',
)
APPEND_SLASH = False
ROOT_URLCONF = 'knoknok.urls'

TEMPLATES = [
    {
       'BACKEND': 'django.template.backends.jinja2.Jinja2',
       'DIRS': [],
       'APP_DIRS': True,
       'OPTIONS': {
         'environment': 'socnet.jinja2.environment'
       },
     },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'knoknok.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST')
    }
}

print ('!!!!!!!', DATABASES , flush=True)

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = './static_files/'
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'socnet.KNUser'


# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_STORAGE_BUCKET_NAME = os.getenv('MEDIA_BUCKET')
AWS_ACCESS_KEY_ID = os.getenv('MINIO_LOGIN')
AWS_SECRET_ACCESS_KEY = os.getenv('MINIO_PASSWORD')
AWS_S3_ENDPOINT_URL = os.getenv('MINIO_STORAGE_ENDPOINT')

# DEFAULT_FILE_STORAGE = "minio_storage.storage.MinioMediaStorage"
# STATICFILES_STORAGE = "minio_storage.storage.MinioStaticStorage"
#
# MINIO_STORAGE_ENDPOINT = os.getenv('MINIO_STORAGE_ENDPOINT') or 'localhost:9000'
# MINIO_STORAGE_ACCESS_KEY = os.getenv('MINIO_LOGIN')
# MINIO_STORAGE_SECRET_KEY = os.getenv('MINIO_PASSWORD')
# MINIO_STORAGE_MEDIA_BUCKET_NAME = os.getenv('MEDIA_BUCKET')
# MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET = True
# MINIO_STORAGE_STATIC_BUCKET_NAME = os.getenv('STATIC_BUCKET')
# MINIO_STORAGE_AUTO_CREATE_STATIC_BUCKET = True
# MINIO_STORAGE_USE_HTTPS = False
#
# MINIO_STORAGE_MEDIA_URL = f'http://{os.getenv("MINIO_CONTENT_ENDPOINT") or "localhost:9000"}/{os.getenv("MEDIA_BUCKET")}'
# MINIO_STORAGE_STATIC_URL = f'http://{os.getenv("MINIO_CONTENT_ENDPOINT") or "localhost:9000"}/{os.getenv("STATIC_BUCKET")}'

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#
#
# AWS_ACCESS_KEY_ID = os.getenv("MINIO_LOGIN")
# AWS_SECRET_ACCESS_KEY = os.getenv("MINIO_LOGIN")
# AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')

# MINIO_SERVER = os.getenv("MINIO_STORAGE_ENDPOINT")
# MINIO_ACCESSKEY = os.getenv("MINIO_LOGIN")
# MINIO_SECRET = os.getenv("MINIO_PASSWORD")
# MINIO_BUCKET = 'media'
# MINIO_SECURE = True
# DEFAULT_FILE_STORAGE = 'django_minio.storage.MinioStorage'
#

# MINIO_ENDPOINT = os.getenv("MINIO_STORAGE_ENDPOINT")
# MINIO_ACCESS_KEY = os.getenv("MINIO_LOGIN")
# MINIO_SECRET_KEY = os.getenv("MINIO_PASSWORD")
# MINIO_USE_HTTPS = False
# MINIO_CONSISTENCY_CHECK_ON_START = True
# MINIO_BUCKET_CHECK_ON_SAVE = True
# MINIO_MEDIA_FILES_BUCKET = 'media'
# MINIO_PRIVATE_BUCKETS = [
#     'django-backend-dev-private',
# ]
# MINIO_PUBLIC_BUCKETS = [
#     'django-backend-dev-public',
#     MINIO_MEDIA_FILES_BUCKET,
# ]
# MINIO_POLICY_HOOKS: List[Tuple[str, dict]] = []
# MINIO_STATIC_FILES_BUCKET = 'my-static-files-bucket'  # replacement for STATIC_ROOT





# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
#
# AWS_ACCESS_KEY_ID = os.getenv("MINIO_LOGIN")
# AWS_SECRET_ACCESS_KEY = os.getenv("MINIO_PASSWORD")
# AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")


# DEFAULT_FILE_STORAGE = 'minio_storage.storage.MinioMediaStorage'
# STATICFILES_STORAGE = 'minio_storage.storage.MinioStaticStorage'
#
#MINIO_STORAGE_ENDPOINT = os.getenv('MINIO_STORAGE_ENDPOINT')
#MINIO_STORAGE_ACCESS_KEY = os.getenv('MINIO_LOGIN')
#MINIO_STORAGE_SECRET_KEY = os.getenv('MINIO_PASSWORD')
# MINIO_STORAGE_USE_HTTPS = False
# MINIO_STORAGE_MEDIA_OBJECT_METADATA = {"Cache-Control": "max-age=1000"}
#MINIO_STORAGE_MEDIA_BUCKET_NAME = 'local-media'
# MINIO_STORAGE_AUTO_CREATE_MEDIA_POLICY = 'READ_WRITE'
# MINIO_STORAGE_MEDIA_BACKUP_BUCKET = 'Recycle Bin'
# MINIO_STORAGE_MEDIA_BACKUP_FORMAT = '%c/'
#MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET = True
# MINIO_STORAGE_STATIC_BUCKET_NAME = 'local-static'
# MINIO_STORAGE_AUTO_CREATE_STATIC_BUCKET = True
#
# MINIO_STORAGE_MEDIA_URL = f'http://{MINIO_STORAGE_ENDPOINT}/{MINIO_STORAGE_MEDIA_BUCKET_NAME}/'
# MINIO_STORAGE_STATIC_URL = f'http://{MINIO_STORAGE_ENDPOINT}/{MINIO_STORAGE_STATIC_BUCKET_NAME}/'